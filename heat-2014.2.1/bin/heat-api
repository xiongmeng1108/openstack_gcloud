#!/usr/bin/env python
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Heat API Server. An OpenStack ReST API to Heat.
"""

import eventlet
eventlet.monkey_patch(os=False)

import os
import six
import sys

# If ../heat/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'heat', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from oslo.config import cfg
from oslo import i18n

from heat.common import config
from heat.common.i18n import _
from heat.common import messaging
from heat.common import wsgi
from heat.openstack.common import log as logging
from heat.openstack.common import systemd

i18n.enable_lazy()

LOG = logging.getLogger('heat.api')

if __name__ == '__main__':
    try:
        cfg.CONF(project='heat', prog='heat-api')
        logging.setup('heat')
        messaging.setup()

        app = config.load_paste_app()

        port = cfg.CONF.heat_api.bind_port
        host = cfg.CONF.heat_api.bind_host
        LOG.info(_('Starting Heat ReST API on %(host)s:%(port)s'),
                 {'host': host, 'port': port})
        server = wsgi.Server()
        server.start(app, cfg.CONF.heat_api, default_port=port)
        systemd.notify_once()
        server.wait()
    except RuntimeError as e:
        msg = six.text_type(e)
        sys.exit("ERROR: %s" % msg)
