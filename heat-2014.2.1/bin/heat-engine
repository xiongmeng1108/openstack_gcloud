#!/usr/bin/env python
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Heat Engine Server.  This does the work of actually implementing the API
calls made by the user.  Normal communications is done via the heat API
which then calls into this engine.
"""

import eventlet
eventlet.monkey_patch()

import os
import sys

# If ../heat/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(POSSIBLE_TOPDIR, 'heat', '__init__.py')):
    sys.path.insert(0, POSSIBLE_TOPDIR)

from oslo.config import cfg
from oslo import i18n

from heat.common import messaging
from heat.openstack.common import log as logging
from heat.openstack.common import service

from heat.rpc import api as rpc_api

i18n.enable_lazy()

LOG = logging.getLogger('heat.engine')

if __name__ == '__main__':

    cfg.CONF(project='heat', prog='heat-engine')
    logging.setup('heat')
    messaging.setup()

    from heat.engine import service as engine

    srv = engine.EngineService(cfg.CONF.host, rpc_api.ENGINE_TOPIC)
    launcher = service.launch(srv, workers=cfg.CONF.num_engine_workers)
    if cfg.CONF.enable_cloud_watch_lite:
        # We create the periodic tasks here, which mean they are created
        # only in the parent process when num_engine_workers>1 is specified
        srv.create_periodic_tasks()
    launcher.wait()
